!------------------------------------------------------------------------------
  SUBROUTINE VankaCreate(A,Solver)
     USE DefUtils
!------------------------------------------------------------------------------
     TYPE(Matrix_t) :: A
     TYPE(Solver_t) :: Solver
!------------------------------------------------------------------------------
     INTEGER, POINTER :: Diag(:), Rows(:), Cols(:), Perm(:), &
                      Indexes(:), Ind(:)
     REAL(KIND=dp), POINTER :: Values(:), SValues(:)
     LOGICAL ::  found
     REAL(KIND=dp), ALLOCATABLE :: al(:,:)

     TYPE(Element_t), pointer :: element

     INTEGER :: i,j,k,l,nn, dof, dofs, Active

     Diag => A % Diag
     Rows => A % Rows
     Cols => A % Cols
     IF ( .NOT. ASSOCIATED(A % ILUValues) ) &
       ALLOCATE( A % ILUvalues(SIZE(A % Values)) )
     Values => A % ILUValues

     dofs  = Solver % variable % dofs
     perm => Solver % variable % perm
     svalues => a % values
     values = 0._dp

     nn = Solver % Mesh % MaxElementDOFs
     ALLOCATE( Indexes(nn), AL(nn*dofs,nn*dofs), ind(nn*dofs) )

     Active = GetNOFActive(Solver)
     DO i=1,Active
       element => GetActiveElement(i)
       nn = GetElementDOFs(Indexes)
       l = 0
       DO j=1,nn
         k =  Indexes(j)
         DO dof=1,dofs
           l = l + 1
           ind(l) = dofs*(perm(k)-1)+dof
         END DO
       END DO

       a % values => svalues
       DO j=1,nn*dofs
         DO k=1,nn*dofs
           al(j,k) = CRS_GetMatrixElement( A, ind(j), ind(k) )
         END DO
       END DO
       CALL InvertMatrix(al,nn*dofs)
       a % values => values
       DO j=1,nn*dofs
         DO k=1,nn*dofs
           CALL CRS_AddToMatrixElement( A,ind(j),ind(k),AL(j,k) )
         END DO
       END DO
     END DO
     A % Values => Svalues
     DEALLOCATE(AL, Indexes, Ind)
!------------------------------------------------------------------------------
  END SUBROUTINE VankaCreate
!------------------------------------------------------------------------------
