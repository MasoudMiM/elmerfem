!/*****************************************************************************/
! *
! *  Elmer, A Finite Element Software for Multiphysical Problems
! *
! *  Copyright 1st April 1995 - , CSC - Scientific Computing Ltd., Finland
! * 
! *  This program is free software; you can redistribute it and/or
! *  modify it under the terms of the GNU General Public License
! *  as published by the Free Software Foundation; either version 2
! *  of the License, or (at your option) any later version.
! * 
! *  This program is distributed in the hope that it will be useful,
! *  but WITHOUT ANY WARRANTY; without even the implied warranty of
! *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! *  GNU General Public License for more details.
! *
! *  You should have received a copy of the GNU General Public License
! *  along with this program (in file fem/GPL-2); if not, write to the 
! *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
! *  Boston, MA 02110-1301, USA.
! *
! *****************************************************************************/
! *
! * $Id: $
! *****************************************************************************/

#include "huti_fdefs.h"

!------------------------------------------------------------------------------
  SUBROUTINE MultigridPrec( u,v,ipar )
!------------------------------------------------------------------------------
!******************************************************************************
! 
!  DESCRIPTION:
!
!  ARGUMENTS:
!
!    REAL(KIND=dp) :: u,v
!
!    INTEGER :: ipar(:)
!      INPUT: structure holding info from (HUTIter-iterative solver package)
!
!******************************************************************************
    USE Multigrid

    INTEGER, DIMENSION(*) :: ipar
    REAL(KIND=dp), DIMENSION(*) :: u,v

    INTEGER :: n, DOFs
    TYPE(Solver_t), POINTER :: PSolver

    PSolver => CurrentModel % Solver

    n = HUTI_NDIM
    IF ( PSolver % Matrix % Complex ) n=2*n

    u(1:n) = 0.0d0
    DOFs =  n / COUNT(PSolver % Variable % Perm>0)
    CALL MultiGridSolve( GlobalMatrix, u(1:n), v(1:n), &
          DOFs,  PSolver, PSolver % MultiGridLevel, FirstCall)

    FirstCall = .FALSE.

  END SUBROUTINE MultigridPrec
!------------------------------------------------------------------------------


