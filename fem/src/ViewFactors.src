!/*****************************************************************************/
! *
! *  Elmer, A Finite Element Software for Multiphysical Problems
! *
! *  Copyright 1st April 1995 - , CSC - Scientific Computing Ltd., Finland
! * 
! *  This program is free software; you can redistribute it and/or
! *  modify it under the terms of the GNU General Public License
! *  as published by the Free Software Foundation; either version 2
! *  of the License, or (at your option) any later version.
! * 
! *  This program is distributed in the hope that it will be useful,
! *  but WITHOUT ANY WARRANTY; without even the implied warranty of
! *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! *  GNU General Public License for more details.
! *
! *  You should have received a copy of the GNU General Public License
! *  along with this program (in file fem/GPL-2); if not, write to the 
! *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
! *  Boston, MA 02110-1301, USA.
! *
! *****************************************************************************/
!
!/******************************************************************************
! *
! *  V0.0a ELMER/FEM Viewfactor computation
! *
! ******************************************************************************
! *
! *  Authors: Juha Ruokolainen
! *  Email:   Juha.Ruokolainen@csc.fi
! *  Web:     http://www.csc.fi/elmer
! *  Address: CSC - Scientific Computing Ltd.
! *           Keilaranta 14
! *           02101 Espoo, Finland 
! *
! *  Original Date: 02 Jun 1997
! *
! *****************************************************************************/
! *
! * $Id: ViewFactors.src,v 1.15 2007/04/13 08:28:08 jpr Exp $
! ******************************************************************************

   MODULE ViewFactorGlobals
     USE Types
     REAL(KIND=dp), ALLOCATABLE :: Jacobian(:,:)
   END MODULE ViewFactorGlobals

   PROGRAM ViewFactors

     USE DefUtils
     USE ViewFactorGlobals

     IMPLICIT NONE

!------------------------------------------------------------------------------
!    Local variables
!------------------------------------------------------------------------------
     TYPE(Model_t), POINTER :: Model
     TYPE(Mesh_t), POINTER  :: Mesh
     TYPE(Solver_t), POINTER  :: Solver

     INTEGER :: i,j,k,l,t,k1,k2,n,iter,Ndeg,Time,NSDOFs,MatId,istat

     REAL(KIND=dp) :: SimulationTime,dt,s,a1,a2,FMin,FMax

     INTEGER, ALLOCATABLE ::  Surfaces(:), TYPE(:)
     REAL(KIND=dp), ALLOCATABLE :: Coords(:),Normals(:),Factors(:)

     TYPE(Element_t),POINTER :: Element, Parent

     INTEGER :: BandSize,SubbandSize,RadiationSurfaces,Row,Col
     INTEGER, DIMENSION(:), POINTER :: Perm

     REAL(KIND=dp) :: Norm,PrevNorm,Emissivity,MinFactor

     TYPE(Nodes_t) :: ElementNodes
     TYPE(ValueList_t), POINTER :: BC, Material

     INTEGER :: LeftNode,RightNode,LeftBody,RightBody,RadBody
     REAL(KIND=dp) :: NX,NY,NZ,NRM(3),DensL,DensR

     INTEGER :: divide
     REAL(KIND=dp) :: AreaEPS, RayEPS, FactEPS

     INTEGER, POINTER :: Timesteps(:)
     INTEGER :: TimeIntervals,interval,timestep
     
     LOGICAL :: CylindricSymmetry,GotIt, Found, Radiation

     CHARACTER(LEN=MAX_NAME_LEN) :: eq,RadiationFlag, &
           ViewFactorsFile,OutputName,ModelName,LMessage, TempString

     TYPE(Element_t), POINTER :: RadElements(:)
     INTEGER :: RadiationBody, MaxRadiationBody
     LOGICAL :: RadiationOpen

     EXTERNAL Matvec,DiagPrec


     CALL Info( 'ViewFactors', ' ', Level=3 )
     CALL Info( 'ViewFactors', '==================================================', Level=3 )
     CALL Info( 'ViewFactors', ' E L M E R  V I E W F A C T O R S,  W E L C O M E',  Level=3  )
     CALL Info( 'ViewFactors', '==================================================', Level=3 )

!------------------------------------------------------------------------------
!    Read element definition file, and initialize element types
!------------------------------------------------------------------------------
     CALL InitializeElementDescriptions
!------------------------------------------------------------------------------
!    Read Model from Elmer Data Base
!------------------------------------------------------------------------------
     CALL Info( 'ViewFactors', ' ', Level=3 )
     CALL Info( 'ViewFactors', ' ', Level=3 )
     CALL Info( 'ViewFactors', 'Reading Model... ', Level=3 )

!------------------------------------------------------------------------------
     OPEN( 1,file='ELMERSOLVER_STARTINFO', STATUS='OLD', ERR=10 )
     GOTO 20
                     
                                                                                         
10   CONTINUE
     CALL Fatal( 'ElmerSolver', 'Unable to find ELMERSOLVER_STARTINFO, cant execute.' )
                                                                                                              
20   CONTINUE
       READ(1,'(a)') ModelName
     CLOSE(1)

     Model => LoadModel( ModelName,.FALSE.,1,0 )

     CurrentModel => Model

     NULLIFY( Mesh )
     DO i=1,Model % NumberOfSolvers
       Solver => Model % Solvers(i)
       Radiation = ListGetLogical( Solver % Values, 'Radiation Solver', Found )
       eq = ListGetString( Solver % Values, 'Equation' )
       IF ( Radiation .OR. TRIM(eq) == 'heat equation' ) THEN
         Mesh => Solver % Mesh
         Model % Solver => Solver
         EXIT
       ENDIF
     END DO
  
     IF ( .NOT. ASSOCIATED(Mesh) ) THEN
       CALL Fatal( 'ViewFactors', 'No heat equation definition. ' // &
                  'Cannot compute factors.' )
     END IF
     CALL SetCurrentMesh( Model,Mesh )

     CALL Info( 'ViewFactors', '... Done',Level=3 )
     CALL Info( 'ViewFactors', ' ',Level=3 )

!------------------------------------------------------------------------------
!    Figure out requested coordinate system
!------------------------------------------------------------------------------
     eq = GetString( GetSimulation(), 'Coordinate System' )

     IF ( eq(1:13) == 'cartesian' .AND. CoordinateSystemDimension() == 3) THEN
       Coordinates = Cartesian
     ELSE IF ( eq(1:13) == 'axi symmetric' ) THEN
       Coordinates = AxisSymmetric
     ELSE IF( eq(1:19) == 'cylindric symmetric' ) THEN
       Coordinates = CylindricSymmetric
     ELSE
       CALL Error( 'ViewFactors', &
         'Unknown Global Coordinate System for Viewfactor computation ')
       CALL Error( 'ViewFactors', TRIM(eq) )
       CALL Fatal( 'ViewFactors', &
         'Only Cartesian 3D or Axi/Cylindrical Symmetric coordinates allowed. Aborting' )
     END IF

     CylindricSymmetry = (Coordinates == AxisSymmetric) .OR. (Coordinates==CylindricSymmetric)
!------------------------------------------------------------------------------

     ALLOCATE( ElementNodes % x(Model % MaxElementNodes), &
         ElementNodes % y(Model % MaxElementNodes), &
         ElementNodes % z(Model % MaxElementNodes),STAT=istat )
     
     IF ( CylindricSymmetry ) THEN
       ALLOCATE( Coords(2 * Model % NumberOfNodes), STAT=istat )
       DO i=1,Model % NumberOfNodes
         Coords(2*(i-1)+1) = Model % Nodes % x(i)
         Coords(2*(i-1)+2) = Model % Nodes % y(i)
       END DO
     ELSE
       ALLOCATE( Coords(3 * Model % NumberOfNodes), STAT=istat )
       DO i=1,Model % NumberOfNodes
         Coords(3*(i-1)+1) = Model % Nodes % x(i)
         Coords(3*(i-1)+2) = Model % Nodes % y(i)
         Coords(3*(i-1)+3) = Model % Nodes % z(i)
       END DO
     END IF
     IF ( istat /= 0 ) THEN
       CALL Fatal('Viewfactors', 'Memory allocation error. Aborting' )
     END IF

     ! The routine originally plays with the element list and therefore
     ! when several radiation boundaries are needed both the original and 
     ! the new elementlist needs to be in the memory. Thus the hazzle.
     
     MinFactor = ListGetConstReal(Solver % Values,'Minimum View Factor',GotIt)
     IF(.NOT. GotIt) MinFactor = 1.0d-20

     CALL AllocateVector( RadElements, Model % NumberOfBoundaryElements, 'ViewFactors' )

! Check the maximum radiation body
     MaxRadiationBody = 0
     DO t= 1, Model % NumberOfBoundaryElements
       Element => GetBoundaryElement(t)
       IF ( GetElementFamily() == 1 ) CYCLE
       BC => GetBC()
       IF ( .NOT. ASSOCIATED( BC ) ) CYCLE

       RadiationFlag = GetString( BC, 'Radiation',GotIt )
       IF ( GotIt .AND. RadiationFlag(1:12) == 'diffuse gray' ) THEN
         i = MAX(1, GetInteger( BC, 'Radiation Boundary', GotIt ))
         MaxRadiationBody = MAX(i, MaxRadiationBody)
       END IF
     END DO

     RadiationBody = 0
     DO RadiationBody = 1, MaxRadiationBody
       WRITE( LMessage,'(A,I2)') 'Computing view factors for radiation body',RadiationBody
       CALL Info('ViewFactors',LMessage,Level=3)
    
!------------------------------------------------------------------------------
!    Here we start...
!------------------------------------------------------------------------------
       RadiationSurfaces = 0
       RadiationOpen = .FALSE.

!------------------------------------------------------------------------------
!    loop to get the surfaces participating in radiation, discard the rest
!    of the elements...
!------------------------------------------------------------------------------

       DO t=1,Model % NumberOfBoundaryElements
         Element => GetBoundaryElement(t)
         IF ( GetElementFamily() == 1 ) CYCLE
         
         BC => GetBC()
         IF ( .NOT. ASSOCIATED( BC ) ) CYCLE
         
         RadiationFlag = GetString( BC, 'Radiation', GotIt )
         IF ( GotIt .AND. RadiationFlag(1:12) == 'diffuse gray' ) THEN
           i = MAX(1, GetInteger( BC, 'Radiation Boundary', GotIt ))
           IF(i == RadiationBody) THEN
             RadiationOpen = RadiationOpen .OR. GetLogical( BC, 'Radiation Boundary Open', GotIt )
             RadiationSurfaces = RadiationSurfaces + 1
             j = t + Model % NumberOFBulkElements
             RadElements(RadiationSurfaces) = Model % Elements(j)
           END IF
         END IF
       END DO
       
       
       N = RadiationSurfaces
       
       IF ( N == 0 ) THEN
         CALL Warn( 'Viewfactors', 'No surfaces participating in radiation?' )
         IF(RadiationBody < MaxRadiationBody) THEN
           CYCLE
         ELSE
           CALL Warn( 'Viewfactors', 'Stopping cause nothing to be done...' )
           STOP
         END IF
       END IF
       
       WRITE( LMessage,'(A,I9)' ) 'Number of surfaces participating in radiation',N
       CALL Info('ViewFactors',LMessage)
       
       IF ( CylindricSymmetry ) THEN
         ALLOCATE( Surfaces(2*N), Factors(N*N), STAT=istat )
       ELSE
         ALLOCATE( Normals(3*N), Factors(N*N),Surfaces(4*N), TYPE(N), STAT=istat )
       END IF
       IF ( istat /= 0 ) THEN
         CALL Fatal( 'Viewfactors', 'Memory allocation error. Aborting' )
       END IF
       
       DO t=1,N
         Element => RadElements(t)
         k = Element % TYPE % NumberOfNodes
         ElementNodes % x(1:k) = Model % Nodes % x(Element % NodeIndexes)
         ElementNodes % y(1:k) = Model % Nodes % y(Element % NodeIndexes)
         ElementNodes % z(1:k) = Model % Nodes % z(Element % NodeIndexes)
         
         IF ( Element % TYPE % ElementCode / 100 == 3 ) THEN
           nrm = NormalVector( Element,ElementNodes, &
               1.0d0 / 3.0d0, 1.0d0 / 3.0d0 )
         ELSE
           nrm = NormalVector( Element, ElementNodes, 0.0d0, 0.0d0 )
         END IF
         
         LeftBody  = 0
         IF ( ASSOCIATED(Element % BoundaryInfo % Left) ) &
             LeftBody  = Element % BoundaryInfo % Left % BodyId
         
         RightBody  = 0
         IF ( ASSOCIATED(Element % BoundaryInfo % Right) ) &
             RightBody  = Element % BoundaryInfo % Right % BodyId
         
         LeftNode = -1
         Parent => Element % BoundaryInfo % Left
         IF ( ASSOCIATED(Parent) ) THEN
           DO i=1,Parent % TYPE % NumberOfNodes
             gotIt =.TRUE.
             DO j=1,Element % TYPE % NumberOfNodes
               IF ( Element % NodeIndexes(j)==Parent % NodeIndexes(i)) THEN
                 gotIt=.FALSE.
                 EXIT
               END IF
             END DO
             IF (gotIt) THEN
               LeftNode = Parent % NodeIndexes(i)
               EXIT
             END IF
           END DO
         END IF
         
         RightNode=-1
         Parent => Element % BoundaryInfo % Right
         IF ( ASSOCIATED(Parent) ) THEN
           DO i=1,Parent % TYPE % NumberOfNodes
             gotIt =.TRUE.
             DO j=1,Element % TYPE % NumberOfNodes
               IF ( Element % NodeIndexes(j)==Parent % NodeIndexes(i)) THEN
                 gotIt=.FALSE.
                 EXIT
               END IF
             END DO
             IF (gotIt) THEN
               RightNode = Parent % NodeIndexes(i)
               EXIT
             END IF
           END DO
         END IF
         
         RadBody = ListGetInteger( Model % BCs( Element %  &
             BoundaryInfo % Constraint) % Values, 'Radiation Target Body',GotIt )
         
         IF ( .NOT. GotIt ) THEN
           RadBody = ListGetInteger( Model % BCs( Element %  &
               BoundaryInfo % Constraint) % Values, 'Normal Target Body',GotIt )
         END IF
         
         IF ( RadBody > 0 .AND. (RadBody /= RightBody .AND. RadBody /= LeftBody) ) THEN
           CALL Error( 'ViewFactors', 'Inconsistent direction information (Radiation Target Body)' )
           WRITE( LMessage, * ) 'Radiation Target: ', RadBody, ' Left, Right: ', LeftBody, RightBody
           CALL Fatal( 'ViewFactors', LMessage )
         END IF
         
         IF ( .NOT.GotIt ) THEN
           IF ( LeftBody >= 1 .AND. RightBody >= 1 ) THEN
             MatId = ListGetInteger(Model % Bodies(LeftBody) % Values,'Material')
             DensL = ListGetConstReal( Model % Materials(MatId) % Values,'Density' )
             
             MatId = ListGetInteger(Model % Bodies(RightBody) % Values,'Material')
             DensR = ListGetConstReal( Model % Materials(MatId) % Values,'Density' )
             IF ( DensL < DensR ) LeftNode = RightNode
           ELSE
             IF ( LeftNode <= 0 ) LeftNode = RightNode
           END IF
         ELSE
           IF ( LeftNode <= 0 ) THEN
             LeftNode = RightNode
             LeftBody = RightBody
           END IF
           IF ( RadBody == LeftBody ) Nrm = -Nrm
         END IF
         
         nx = SUM(Model % Nodes % x(Element % NodeIndexes))/k - &
             Model % Nodes % x(LeftNode)
         
         ny = SUM(Model % Nodes % y(Element % NodeIndexes))/k - &
             Model % Nodes % y(LeftNode)
         
         nz = SUM(Model % Nodes % z(Element % NodeIndexes))/k - &
             Model % Nodes % z(LeftNode)
         
         IF ( CylindricSymmetry ) THEN
           IF ( Nrm(1)*nx + Nrm(2)*Ny + Nrm(3)*nz > 0 ) THEN
             Surfaces(2*(t-1)+1) = Element % NodeIndexes(2) - 1
             Surfaces(2*(t-1)+2) = Element % NodeIndexes(1) - 1
           ELSE
             Surfaces(2*(t-1)+1) = Element % NodeIndexes(1) - 1
             Surfaces(2*(t-1)+2) = Element % NodeIndexes(2) - 1
           END IF
         ELSE
           DO i = 1,MIN(k,4)
             Surfaces(4*(t-1)+i) = Element % NodeIndexes(i) - 1
           END DO
           
           TYPE(t) = 404
           IF ( Element % TYPE % ElementCode / 100 == 3 ) TYPE(t) = 303
           
           IF ( Nrm(1)*Nx + Nrm(2)*Ny + Nrm(3)*nz > 0 ) THEN
             Normals(3*(t-1)+1:3*(t-1)+3) =  Nrm
           ELSE
             Normals(3*(t-1)+1:3*(t-1)+3) = -Nrm
           END IF
         END IF
         
       END DO
       
       CALL Info( 'ViewFactors', 'Computing viewfactors...', Level=4 )
       
       IF ( CylindricSymmetry ) THEN
         divide = GetInteger( GetSolverParams(), 'Viewfactor divide',GotIt)
         IF ( .NOT. GotIt ) Divide = 1
         CALL ViewFactorsAxis( N, Surfaces, Coords, Factors, divide )
       ELSE
         AreaEPS = GetConstReal( GetSolverParams(), 'Viewfactor Area Tolerance',  GotIt )
         IF ( .NOT. GotIt ) AreaEPS = 1.0d-1
         FactEPS = GetConstReal( GetSolverParams(), 'Viewfactor Factor Tolerance ', GotIt )
         IF ( .NOT. GotIt ) FactEPS = 1.0d-2
         RayEPS = GetConstReal( GetSolverParams(), 'Viewfactor Raytrace Tolerace',  GotIt )
         IF ( .NOT. GotIt ) RayEPS = 1.0d-5
         CALL ViewFactors3D( N, Surfaces, TYPE, Coords, Normals, &
             Factors, AreaEPS, FactEPS, RayEPS, 4, 3 )
       END IF
       CALL Info( 'ViewFactors', '...Done.', Level=4 )
       
       
       DO i=1,N
         s = 0.0D0
         DO j=1,N
           IF(Factors((i-1)*N+j) < MinFactor) Factors((i-1)*N+j) = 0.0d0         
           s = s + Factors((i-1)*N+j)
         END DO
         
         IF(i == 1) THEN
           Fmin = s 
           Fmax = s
         ELSE         
           FMin = MIN( FMin,s )
           FMax = MAX( FMax,s )
         END IF
       END DO
       
       
       CALL Info( 'ViewFactors', ' ', Level=3 )
       CALL info( 'ViewFactors', 'Viewfactors before normalizing: ', Level=3 )
       CALL Info( 'ViewFactors', ' ', Level=3 )
       WRITE( LMessage, * ) '        Minimum row sum: ',FMin
       CALL Info( 'ViewFactors', LMessage, Level=3 )
       WRITE( LMessage, * ) '        Maximum row sum: ',FMax
       CALL Info( 'ViewFactors', LMessage, Level=3 )
       CALL Info( 'ViewFactors', ' ', Level=3 )
       
       
       IF(.NOT. RadiationOpen) THEN
         CALL Info( 'ViewFactors', 'Normalizing Factors... ', Level=3 )
         CALL NormalizeFactors( Model )
         
         DO i=1,N
           s = 0.0D0
           DO j=1,N
             s = s + Factors((i-1)*N+j)
           END DO
           IF(i == 1) THEN
             Fmin = s
             Fmax = s
           ELSE
             FMin = MIN( FMin,s )
             FMax = MAX( FMax,s )
           END IF
         END DO
         CALL Info( 'ViewFactors', 'Done... ', Level=3 )
         
         CALL Info( 'ViewFactors', ' ', Level=3 )
         CALL info( 'ViewFactors', 'Viewfactors after normalizing: ', Level=3 )
         CALL Info( 'ViewFactors', ' ', Level=3 )
         WRITE( LMessage, * ) '        Minimum row sum: ',FMin
         CALL Info( 'ViewFactors', LMessage, Level=3 )
         WRITE( LMessage, * ) '        Minimum row sum: ',FMax
         CALL Info( 'ViewFactors', LMessage, Level=3 )
         CALL Info( 'ViewFactors', ' ', Level=3 )
       END IF


       ViewFactorsFile = GetString( GetSimulation(),'View Factors',GotIt)
       IF ( .NOT.GotIt ) ViewFactorsFile = 'ViewFactors.dat'
       IF(RadiationBody > 1) THEN
         TempString = ViewFactorsFile
         WRITE(ViewFactorsFile, '(A,I1)') TRIM(TempString),RadiationBody
       END IF
       
       IF ( LEN_TRIM(Model % Mesh % Name) > 0 ) THEN
         OutputName = TRIM(OutputPath) // '/' // &
             TRIM(Model % Mesh % Name) // '/' // TRIM(ViewFactorsFile)
       ELSE
         OutputName = TRIM(ViewFactorsFile)
       END IF
       
       OPEN( 1,File=TRIM(OutputName),STATUS='UNKNOWN' )
       
       ! Use loser constraint for MinFactor as the errors can't be renormalized any more 
       MinFactor = MinFactor / 10.0
       
       DO i=1,N
         k = 0
         DO j=1,N
           IF ( Factors((i-1)*N+j) > MinFactor ) k = k + 1
         END DO
         WRITE( 1,* ) k
         DO j=1,N
           IF ( Factors((i-1)*N+j) > MinFactor ) THEN
             WRITE( 1,* ) i,j,Factors((i-1)*N+j)
           END IF
         END DO
       END DO
       
       CLOSE(1)

       IF ( CylindricSymmetry ) THEN
         DEALLOCATE( Surfaces, Factors)
       ELSE
         DEALLOCATE( Normals, Factors, Surfaces, TYPE)
       END IF
       
     END DO  /* Of radiation RadiationBody */

     CALL Info( 'ViewFactors', '*** ALL DONE ***' )
     CALL FLUSH(6)

   CONTAINS
   

      SUBROUTINE NormalizeFactors( Model )

        TYPE(Model_t), POINTER :: Model

        INTEGER :: itmax=20,it = 0,i,j,k

        LOGICAL :: li,lj

        REAL(KIND=dp), ALLOCATABLE :: RHS(:),SOL(:),Areas(:),PSOL(:)

        REAL(KIND=dp) :: SUM = 0.0D0,eps=1.0D-20,s,si,sj
  
        ALLOCATE( RHS(N),SOL(N),PSOL(N),Areas(N),Jacobian(N,N),STAT=istat )

        IF ( istat /= 0 ) THEN
          CALL Fatal( 'Viewfactors', &
              'Memory allocation error in NormalizeFactors.Aborting.' )
        END IF

!------------------------------------------------------------------------------
!       First force the matrix (before dividing by area) to be symmetric
!------------------------------------------------------------------------------
        DO i=1,N
          Areas(i) = ElementArea( Model % Mesh, RadElements(i), &
               RadElements(i) % TYPE % NumberOfNodes )
        END DO

        DO i=1,N
          DO j=i,N
            si = Areas(i) * Factors((i-1)*N+j)
            sj = Areas(j) * Factors((j-1)*N+i)

            li = (ABS(si) < HUGE(si)) 
            lj = (ABS(sj) < HUGE(sj)) 

            IF(li .AND. lj) THEN 
              s = (si+sj)/2.0
            ELSE IF(li) THEN
              s = si
            ELSE IF(lj) THEN
              s = sj
            ELSE 
              s = 0.0
            END IF

            Factors((i-1)*N+j) = s
            Factors((j-1)*N+i) = s
          END DO
        END DO
!------------------------------------------------------------------------------
!       Next we solve the equation DFD = A by Newton iteration (this is a very
!       well behaved equation (symmetric, diagonal dominant), no need for any
!       tricks...)
!------------------------------------------------------------------------------
        SOL = 1.0D0
        SUM = 1.0D0
        it = 0

        DO WHILE( SUM > eps .AND. it < itmax )
          DO i=1,N
            SUM = 0.0D0
            DO j=1,N
              SUM = SUM + Factors((i-1)*N+j) * SOL(j)
            END DO
            SUM = SUM * SOL(i)
            RHS(i) = -(SUM - Areas(i))
          END DO

          SUM = 0.0D0
          DO i=1,N
            SUM = SUM + RHS(i)**2 / Areas(i)
          END DO
          SUM = SUM / N

          IF ( SUM <= eps ) EXIT

          DO i=1,N
            DO j=1,N
              Jacobian(i,j) = Factors((i-1)*N+j) * SOL(i)
            END DO
            DO j=1,N
              Jacobian(i,i) = Jacobian(i,i) + Factors((i-1)*N+j) * SOL(j)
            END DO
          END DO
             
          PSOL = SOL
          CALL IterSolv( N,SOL,RHS )
          SOL = PSOL + SOL

          it = it + 1
        END DO

!------------------------------------------------------------------------------
!       Normalize the factors and (re)divide by areas
!------------------------------------------------------------------------------
        DO i=1,N
          DO j=1,N
            Factors((i-1)*N+j) = Factors((i-1)*N+j)*SOL(i)*SOL(j)/Areas(i)
          END DO
        END DO

        DEALLOCATE( SOL,RHS,PSOL,Areas,Jacobian )

    END SUBROUTINE NormalizeFactors


#include "huti_fdefs.h"
!
    SUBROUTINE IterSolv( N,x,b )
      IMPLICIT NONE

      REAL(KIND=dp), DIMENSION(:) :: x,b

      REAL(KIND=dp) :: dpar(50)

      INTEGER :: N,ipar(50),wsize
      REAL(KIND=dp), ALLOCATABLE :: work(:,:)

      INTEGER  :: HUTI_D_CG
      EXTERNAL :: HUTI_D_CG
      INTEGER(KIND=addrInt) :: AddrFunc, iterProc, mvProc, pcondProc, dProc=0
!------------------------------------------------------------------------------
      HUTI_NDIM = N

      ipar = 0
      dpar = 0.0D0

      HUTI_WRKDIM = HUTI_CG_WORKSIZE
      wsize = HUTI_WRKDIM
          
      HUTI_NDIM     = N
      HUTI_DBUGLVL  = 0
      HUTI_MAXIT    = 100
 
      ALLOCATE( work(wsize,N) )

      HUTI_TOLERANCE = 1.0D-12

       iterProc  = AddrFunc(HUTI_D_CG)
       mvProc    = AddrFunc(Matvec)
       pcondProc = AddrFunc(DiagPrec)
       CALL IterCall( iterProc,x,b,ipar,dpar,work,mvProc,pcondProc, &
                 dProc, dProc, dProc, dProc )
          
      DEALLOCATE( work )
    END SUBROUTINE IterSolv 

  END PROGRAM ViewFactors



  SUBROUTINE DiagPrec( u,v,ipar )
    USE ViewFactorGlobals

    REAL(KIND=dp) :: u(*),v(*)
    INTEGER :: ipar(*)

    INTEGER :: i,n

    N = HUTI_NDIM
    DO i=1,N
      u(i) = v(i) / Jacobian(i,i) 
    END DO
  END SUBROUTINE DiagPrec



  SUBROUTINE Matvec( u,v,ipar )
    USE ViewFactorGlobals

    REAL(KIND=dp) :: u(*),v(*)
    INTEGER :: ipar(*)

    INTEGER :: i,j,n
    REAL(KIND=dp) :: s

    n = HUTI_NDIM

    DO i=1,n
      s = 0.0D0
      DO j=1,n
        s = s + Jacobian(i,j) * u(j)
      END DO
      v(i) = s
    END DO
  END SUBROUTINE Matvec
