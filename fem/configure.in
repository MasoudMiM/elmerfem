dnl
dnl Juha.Vierinen@csc.fi 5/2005
dnl 
AC_INIT(src/Solver.f90)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(elmer, 1.0.0)

AM_MAINTAINER_MODE

sinclude(acx_elmer.m4)
ACX_HOST
ACX_DEBUG
ACX_BOURNE_SHELL

AC_LANG_COMPILER
AC_PROG_RANLIB
ACX_PROG_AR

AC_PROG_CC
ACX_PROG_TRADITIONAL_CPP
AC_PROG_CXX
AC_PROG_FC
AC_PROG_F77

ACX_CHECK_STDCXXLIB

AC_EXEEXT
AC_OBJEXT

dnl It is important to do this before *_WRAPPERS, because the flibs will be different for 32 and 64 bits
ACX_CHECK_B64FLAGS

AC_F77_WRAPPERS
AC_FC_WRAPPERS

ACX_FC_LINKTYP
ACX_FC_CHAR_MANGLING
ACX_FC_ETIME
ACX_FC_FLUSH

ACX_PIC_FLAGS
ACX_FC_INCLUDE_MODULE_FLAG
ACX_SHLIB_STUFF

LIBS="$LIBS -L$prefix/lib"
CFLAGS="$CFLAGS -I$prefix/include"
FCFLAGS="$FCFLAGS -I. -I$prefix/include"
FFFLAGS="$FCFLAGS -I. -I$prefix/include"
ELMER_HOME="$prefix"

ELMER_LIBERRORMSG="wasn't found, make sure it is in the prefix, or CFLAGS and LIBS are correct if they are somewhere else."

sinclude(acx_mpi.m4)
ACX_MPI
AM_CONDITIONAL(USE_MPI, test "$acx_mpi_ok" = "yes")
AM_CONDITIONAL(USE_LOCAL_MPIF_H, test "$acx_mpif_h_found" = "no")
AM_CONDITIONAL(USE_LDAIX, test "$use_ldaix" = "yes")
if test "$MPI_INCLUDE_DIR" != ""; then
   FCPPFLAGS="$FCPPFLAGS -I$MPI_INCLUDE_DIR"
   FFLAGS="$FFLAGS -I$MPI_INCLUDE_DIR"
   FCFLAGS="$FCFLAGS -I$MPI_INCLUDE_DIR"
fi

sinclude(acx_lapack.m4)
sinclude(acx_blas.m4)
ACX_BLAS([], [AC_MSG_ERROR([BLAS was not found!])])
ACX_LAPACK([], [AC_MSG_ERROR([LAPACK was not found!])])
ACX_HUTI([], [AC_MSG_ERROR([Libhuti wasn't found])])
ACX_EIOF([], [AC_MSG_ERROR([libeiof $ELMER_LIBERRORMSG])])
ACX_ARPACK([], [AC_MSG_RESULT([..using internal arpack])])
ACX_PARPACK([], [AC_MSG_RESULT([..using internal parpack])])
ACX_UMFPACK([], [AC_MSG_WARN([UMFPACK not found, some functionaly will be disabled.])])
ACX_MATC([], [AC_MSG_ERROR([libmatc $ELMER_LIBERRORMSG])])
AC_CHECK_LIB(m,main)

dnl see if arpack has to be built locally
if test x"$acx_arpack_ok" = xno; then
   ARPACK_LIBS="arpack/libarpack.a"
fi

dnl see if parpack has to be built locally (only when mpi is fine)
if test x"$acx_parpack_ok" = xno; then
if test x"$acx_mpi_ok" = xyes; then
   PARPACK_LIBS="parpack/libparpack.a"
fi
fi

dnl
dnl Compiler specific stuff
dnl
dnl Troubles with intel compiler (ElmerSolver does not link with icc and libsolver doesn't link with ifort :)
dnl
case "$FC" in
  *xlf*)
    TESTS_FCFLAGS="$FCFLAGS -qsuffix=cpp=f90"
    FCFLAGS="$FCFLAGS -qsuffix=cpp=F90"
  ;;
  ifort | ifc )
    TESTS_FCFLAGS="$FCFLAGS"
    if test "$ac_cv_f77_compiler_gnu" = yes; then
       AC_MSG_WARN([Intel Fortran 90 compiler and g77 really don't mix that well, I hope you know what you are doing.])
    fi
  ;;
  *)
    TESTS_FCFLAGS="$FCFLAGS"
  ;;
esac

SOLVER_LIBS="$ARPACK_LIBS $PARPACK_LIBS $UMFPACK_LIBS $HUTI_LIBS $MATC_LIBS $EIOF_LIBS $LIBS $LAPACK_LIBS $BLAS_LIBS $MPI_LIBS $FCLIBS $FLIBS $STDCXX_LIBS"
ELMERGRID_LIBS="$LIBS"
MESHGEN2D_LIBS="$LIBS $STDCXX_LIBS"

dnl Host specific hacks.
dnl
case "$canonical_host_type" in
  rs6000-ibm-aix* | powerpc-ibm-aix*)
    EXTRA_LIBS="-L$prefix/lib $HUTI_LIBS $BLAS_LIBS"
  ;;
esac

TESTS_FCFLAGS="$TESTS_FCFLAGS $INCLUDE_MODULE_FLAG. $INCLUDE_MODULE_FLAG../../src $INCLUDE_MODULE_FLAG$prefix/include"

CP='cp'
RM='rm -f'
MV='mv'
MKDIR='mkdir -p'

AC_MSG_RESULT([defining FPICFLAG to be $FPICFLAG])
AC_MSG_RESULT([defining CPICFLAG to be $CPICFLAG])
AC_MSG_RESULT([defining CXXPICFLAG to be $CXXPICFLAG])
AC_MSG_RESULT([defining SHLEXT to be $SHLEXT])
AC_MSG_RESULT([defining SHLLIB to be $SHLLIB])
AC_MSG_RESULT([defining SHLBIN to be $SHLBIN])
AC_MSG_RESULT([defining SHLEXT_VER to be $SHLEXT_VER])
AC_MSG_RESULT([defining SHLLIB_VER to be $SHLLIB_VER])
AC_MSG_RESULT([defining SHLBIN_VER to be $SHLBIN_VER])
AC_MSG_RESULT([defining SHLLINKEXT to be $SHLLINKEXT])
AC_MSG_RESULT([defining DLFCN_DIR to be $DLFCN_DIR])
AC_MSG_RESULT([defining SH_LD to be $SH_LD])
AC_MSG_RESULT([defining SH_LDFLAGS to be $SH_LDFLAGS])
AC_MSG_RESULT([defining SH_LINKING_TO_FLAGS to be $SH_LINKING_TO_FLAGS])
AC_MSG_RESULT([defining DL_LD to be $DL_LD])
AC_MSG_RESULT([defining DL_LDFLAGS to be $DL_LDFLAGS])
AC_MSG_RESULT([defining MKOCTFILE_DL_LDFLAGS to be $MKOCTFILE_DL_LDFLAGS])
AC_MSG_RESULT([defining SONAME_FLAGS to be $SONAME_FLAGS])
AC_MSG_RESULT([defining NO_OCT_FILE_STRIP to be $NO_OCT_FILE_STRIP])
AC_MSG_RESULT([defining RLD_FLAG to be $RLD_FLAG])
AC_MSG_RESULT([defining TEMPLATE_AR to be $TEMPLATE_AR])
AC_MSG_RESULT([defining TEMPLATE_ARFLAGS to be $TEMPLATE_ARFLAGS])
AC_MSG_RESULT([defining library_path_var to be $library_path_var])
AC_MSG_RESULT([defining FCPPFLAGS to be $FCPPFLAGS])
AC_MSG_RESULT([defining LIBSOLVER_DEPS to be $LIBSOLVER_DEPS])
AC_SUBST(TESTS_FCFLAGS)
AC_SUBST(MESHGEN2D_LIBS)
AC_SUBST(FPICFLAG)
AC_SUBST(CPICFLAG)
AC_SUBST(CXXPICFLAG)
AC_SUBST(SHLEXT)
AC_SUBST(SHLLIB)
AC_SUBST(SHLBIN)
AC_SUBST(SHLEXT_VER)
AC_SUBST(SHLLIB_VER)
AC_SUBST(SHLBIN_VER)
AC_SUBST(SHLLINKEXT)
AC_SUBST(DLFCN_DIR)
AC_SUBST(SH_LD)
AC_SUBST(SH_LD2)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(SH_LDFLAGS)
AC_SUBST(SH_LINKING_TO_FLAGS)
AC_SUBST(DL_LD)
AC_SUBST(DL_LDFLAGS)
AC_SUBST(MKOCTFILE_DL_LDFLAGS)
AC_SUBST(SONAME_FLAGS)
AC_SUBST(NO_OCT_FILE_STRIP)
AC_SUBST(RLD_FLAG)
AC_SUBST(TEMPLATE_AR)
AC_SUBST(TEMPLATE_ARFLAGS)
AC_SUBST(library_path_var)
AC_SUBST(FCPPFLAGS)
AC_SUBST(LIBEXT)
AC_SUBST(LIBSOLVER_DEPS)
AC_SUBST(RM)
AC_SUBST(CP)
AC_SUBST(MV)
AC_SUBST(F77)
AC_SUBST(CPP)
AC_SUBST(FC)
AC_SUBST(MKDIR)
AC_SUBST(SOLVER_LIBS)
AC_SUBST(LIBS)
AC_SUBST(FCFLAGS)
AC_DEFINE(ELMER_HOME,$ELMER_HOME,[The configured home directory for elmer.])

AC_CONFIG_HEADER(config.h)

# runtests needs to be runnable
AC_CONFIG_FILES([tests/runtests],
                [chmod 755 tests/runtests])

AC_OUTPUT([
Makefile
Makeconf
src/Makefile
src/arpack/Makefile
src/parpack/Makefile
src/view3d/Makefile
src/viewaxis/Makefile
tests/Makefile
src/elmergrid/Makefile
src/elmergrid/metis/Makefile
src/meshgen2d/Makefile
]
)

AC_MSG_RESULT([
ELMER build options:
  Version                   $VERSION
  Install prefix            $prefix
  CPPFLAGS                  $CPPFLAGS
  FCPPFLAGS                 $FCPPFLAGS

  CFLAGS                    $CFLAGS
  CXXFLAGS                  $CXXFLAGS
  FCFLAGS                   $FCFLAGS
  FFLAGS                    $FFLAGS

  LDFLAGS                   $LDFLAGS
  LIBS                      $LIBS
  SOLVER_LIBS               $SOLVER_LIBS

Compilers:
  Fortran 90 compiler       $FC
  Fortran 77 compiler       $F77
  CC                        $CC
  C++                       $CXX
  CPP                       $CPP

Libs:  
  BLAS                      $BLAS_LIBS
  LAPACK                    $LAPACK_LIBS
  UMFPACK                   $UMFPACK_LIBS
  ARPACK		    $ARPACK_LIBS
  PARPACK		    $PARPACK_LIBS
  HUTI			    $HUTI_LIBS
  EIO			    $EIOF_LIBS
  MPI                       $MPI_LIBS

MPI:
  $acx_mpi_ok
]);
