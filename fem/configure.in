AC_INIT(src/Solver.f90)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(elmer, 1.0.0)

dnl never attempt to regenerate configure in stupid situations...
AM_MAINTAINER_MODE

if test -z "$host"; then
  host=unknown
fi
canonical_host_type=$host
if test "$host" = unknown; then
  AC_MSG_ERROR([configuring for unknown system type, your build will most likely be screwed.])
fi
AC_SUBST(canonical_host_type)

AC_LANG_COMPILER
AC_PROG_RANLIB
sinclude(acx_elmer.m4)

ACX_PROG_AR

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX

AC_CHECK_FUNCS([gettimeofday mkdir sqrt])
AC_CHECK_HEADERS([stdlib.h strings.h sys/param.h sys/time.h])
dnl AC_FUNC_MALLOC
dnl AC_HEADER_TIME
dnl AC_STDC_HEADERS

AC_EXEEXT
AC_OBJEXT

dnl look for default fortran compiler (should we also define the standard?)
dnl others to look for: F77, 
AC_PROG_FC
AC_PROG_F77
dnl ([g95 f90 f77 xlf77 cf77 fort77 f90 xlf90])
AC_LANG_PREPROC(Fortran 90)
dnl AC_F77_LIBRARY_LDFLAGS
AC_FC_LIBRARY_LDFLAGS
AC_F77_DUMMY_MAIN
AC_FC_DUMMY_MAIN

dnl create macros in config.h for obfuscating fortran-type function symbols
AC_F77_WRAPPERS
AC_FC_WRAPPERS

dnl setup name mangling
case "$ac_cv_fc_mangling" in
  "upper case, no underscore, no extra underscore" | \
  "upper case, no underscores")
    AC_DEFINE(ELMER_LINKTYP, 2, "Mangling: upper case, no underscore, no extra underscore") ;;
  "lower case, no underscore, no extra underscore" | \
  "lower case, no underscores" )
    AC_DEFINE(ELMER_LINKTYP, 3, "Mangling: lower case, no underscore, no extra underscore") ;;
  "lower case, underscore, no extra underscore" | \
  "lower case, single underscores")
    AC_DEFINE(ELMER_LINKTYP, 1, "Mangling: lower case, underscore, no extra underscore") ;;
  "lower case, underscore, extra underscore" | \
  "lower case, double underscores")
    AC_DEFINE(ELMER_LINKTYP, 4, "Mangling: lower case, underscore, extra underscore") ;;
  *)
    AC_MSG_ERROR([Unknown sort of Fortran name mangling]) ;;
esac

dnl ******************************************************
dnl Library checks (juha vierinen,25,tkk,tietokoneita,kiinnostunut kaikesta.)
dnl
dnl blas, lapack, arpack, umfpack, hutiter, eio, matc
dnl
sinclude(acx_lapack.m4)
sinclude(acx_blas.m4)
sinclude(acx_mpi.m4)
dnl
dnl Also, we'll look for libs and includes in the installation prefix,
dnl you always want configure to do this by default, but maybe it's anti-GPL or something.
dnl 
LIBS="$LIBS -L$prefix/lib"
CFLAGS="$CFLAGS -I$prefix/include"
dnl order is important, because prefix/include might include bogus .mods or headers
FCFLAGS="$FCFLAGS -I. -I$prefix/include"
FFFLAGS="$FCFLAGS -I. -I$prefix/include"

ELMER_LIBERRORMSG="wasn't found, make sure it is in the prefix, or CFLAGS and LIBS are correct if they are somewhere else."

ACX_MPI([], 
        [AC_MSG_WARN([MPI was not found, using stubs!])])

AC_CHECK_LIB(stdc++, main,,AC_MSG_WARN(elmer might need libstc++))

dnl through in obsolete fortran runtime if found. otherwise hope for the best. (netlib blas and lapack might need this)
AC_CHECK_LIB(g2c, e_wsfe)
ACX_BLAS([], [AC_MSG_ERROR([BLAS was not found!])])
ACX_LAPACK([], [AC_MSG_ERROR([LAPACK was not found!])])
ACX_HUTI([], [AC_MSG_ERROR([Libhuti wasn't found])])


ACX_EIOF([], [AC_MSG_ERROR([libeiof $ELMER_LIBERRORMSG])])

ACX_ARPACK([], [AC_MSG_WARN([Using local ARPACK])])
ACX_UMFPACK([], [AC_MSG_ERROR([libumfpack $ELMER_LIBERRORMSG])])
ACX_MATC([], [AC_MSG_ERROR([libmatc $ELMER_LIBERRORMSG])])

dnl see if arpack has to be built locally
if test x"$acx_arpack_ok" = xno; then
   ARPACK_LIBS="arpack/libarpack.a"
fi

dnl  
dnl OS-specific stuff that hasn't been (or can't be) done in a clean way.
dnl
DLFCN_DIR=
CPICFLAG=-fPIC
CXXPICFLAG=-fPIC
FPICFLAG=-fPIC
SHLEXT=so
SHLLIB='$(SHLEXT)'
SHLBIN=
SHLEXT_VER='$(SHLEXT).$(version)'
SHLLIB_VER='$(SHLLIB).$(version)'
SHLBIN_VER='$(SHLBIN).$(version)'
SHLLINKEXT=
LIBEXT=a
SH_LD='$(CXX)'
SH_LDFLAGS=-shared
SH_LDTOFLAGS=
DL_LD='$(SH_LD)'
DL_LDFLAGS='$(SH_LDFLAGS)'
MKOCTFILE_DL_LDFLAGS='$(DL_LDFLAGS)'
SONAME_FLAGS=
RLD_FLAG=
NO_OCT_FILE_STRIP=false
TEMPLATE_AR='$(AR)'
TEMPLATE_ARFLAGS="$ARFLAGS"
library_path_var=LD_LIBRARY_PATH
FCPPFLAGS=''
CP='cp'
RM='rm -f'
MV='mv'
MKDIR='mkdir -p'
LIBSOLVER_DEPS=$LIBS

dnl Should we use canonical host name or something more coarse grained?
ELMER_OSNAME="LINUX_PC"
dnl ELMER_CHARMANGLING = "char *"

case "$canonical_host_type" in
  *-*-386bsd* | *-*-openbsd* | *-*-netbsd*)
    SH_LD=ld
    SH_LDFLAGS=-Bshareable
  ;;
  *-*-freebsd*)
    SH_LD='$(CC)'
    SH_LDFLAGS=-shared -Wl,-x
  ;;
  alpha*-dec-osf*)
    CPICFLAG=
    CXXPICFLAG=
    FPICFLAG=
    SH_LDFLAGS="-shared -Wl,-expect_unresolved -Wl,'*'"
    RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
  ;;
  *-*-darwin*)
    DL_LDFLAGS='-bundle -bundle_loader $(TOPDIR)/src/octave $(LDFLAGS)'
    MKOCTFILE_DL_LDFLAGS='-bundle -bundle_loader $(bindir)/octave-$(version)$(EXEEXT)'
    SH_LDFLAGS='-dynamiclib -single_module $(LDFLAGS)'
    CXXPICFLAG=
    CPICFLAG=
    FPICFLAG=
    SHLEXT=dylib 
    SHLLIB='$(SHLEXT)'
    SHLEXT_VER='$(version).$(SHLEXT)'
    SHLLIB_VER='$(version).$(SHLLIB)'
    NO_OCT_FILE_STRIP=true
    SONAME_FLAGS='-install_name $(octlibdir)/$@'
    library_path_var=DYLD_LIBRARY_PATH	
  ;;
  *-*-cygwin* | *-*-mingw*)
    CXXPICFLAG=
    CPICFLAG=
    FPICFLAG=
    SHLEXT=dll
    SHLLIB=dll.a
    SHLBIN=dll
    SH_LDFLAGS="-shared -Wl,--export-all-symbols -Wl,--enable-auto-import"
    SHLLINKEXT=.dll
    SONAME_FLAGS='-Wl,--out-implib=$@.a'
    library_path_var=PATH
    FCPPFLAGS="$FCPPFLAGS -DWIN32"
  ;;
  *-*-linux* | *-*-gnu*)
    MKOCTFILE_DL_LDFLAGS="-shared -Wl,-Bsymbolic"
    SONAME_FLAGS='-Wl,-soname -Wl,$@'
    RLD_FLAG='-Wl,-rpath -Wl,$(octlibdir)'
    FCPPFLAGS="-C -P -traditional-cpp -DLINUX_PC -DCYLSYM -DFULL_INDUCTION -DUSE_ARPACK"
  ;;
  i[[3456]]86-*-sco3.2v5*)
    SONAME_FLAGS='-Wl,-h -Wl,$@'
    RLD_FLAG=
    SH_LDFLAGS=-G
  ;;
  rs6000-ibm-aix* | powerpc-ibm-aix*)
    CPICFLAG=
    CXXPICFLAG=
    FPICFLAG=
    DLFCN_DIR=dlfcn
    SH_LDFLAGS="-G"
    SH_LDTOFLAGS="-brtl -bdynamic"
    FCPPFLAGS="-C -P -traditional-cpp -DLINUX_PC -DCYLSYM -DFULL_INDUCTION -DUSE_ARPACK"
  ;;
  hppa*-hp-hpux*)
    if test "$ac_cv_f77_compiler_gnu" = yes; then
      FPICFLAG=-fPIC
    else
      FPICFLAG=+Z
    fi
    SHLEXT=sl
    SH_LDFLAGS="-shared -fPIC"
    RLD_FLAG='-Wl,+b -Wl,$(octlibdir)'
  ;;
  *-sgi-*)
    CPICFLAG=
    CXXPICFLAG=
    FPICFLAG=
    RLD_FLAG='-rpath $(octlibdir)'
  ;;
  sparc-sun-sunos4*)
    if test "$ac_cv_f77_compiler_gnu" = yes; then
      FPICFLAG=-fPIC
    else
      FPICFLAG=-PIC
    fi
    SH_LD=ld
    SH_LDFLAGS="-assert nodefinitions"
    RLD_FLAG='-L$(octlibdir)'

  ;;
  sparc-sun-solaris2* | i386-pc-solaris2*)
    if test "$ac_cv_f77_compiler_gnu" = yes; then
      FPICFLAG=-fPIC
    else
      FPICFLAG=-KPIC
    fi
    if test "$GCC" = yes; then
      CPICFLAG=-fPIC
    else
      CPICFLAG=-KPIC
    fi
    if test "$GXX" = yes; then
      CXXPICFLAG=-fPIC
      SH_LDFLAGS=-shared
    else
      CXXPICFLAG=-KPIC
      SH_LDFLAGS=-G
    fi
    RLD_FLAG='-R $(octlibdir)'
    # Template closures in archive libraries need a different mechanism.
    if test "$GXX" = yes; then
      true
    else
      TEMPLATE_AR='$(CXX)'
      TEMPLATE_ARFLAGS="-xar -o"
    fi
    # sun mpcc -E leaves nasty # comment that chokes the fortran compiler
    AC_CHECK_PROG(TRADITIONAL_CPP, cpp, yes, no)
    if test "$TRADITIONAL_CPP" = yes; then
       CPP=cpp       
    fi
    FCPPFLAGS="-C -P -DCYLSYM -DFULL_INDUCTION -DUSE_ARPACK"

  ;;
esac

dnl
dnl Compiler specific stuff
dnl
dnl Known compilers:
dnl  f77/f90/f95: generic compiler names
dnl  g77: GNU Fortran 77 compiler
dnl  gfortran: putative GNU Fortran 95+ compiler (in progress)
dnl  fort77: native F77 compiler under HP-UX (and some older Crays)
dnl  frt: Fujitsu F77 compiler
dnl  pgf77/pgf90/pgf95: Portland Group F77/F90/F95 compilers
dnl  xlf/xlf90/xlf95: IBM (AIX) F77/F90/F95 compilers
dnl  lf95: Lahey-Fujitsu F95 compiler
dnl  fl32: Microsoft Fortran 77 "PowerStation" compiler
dnl  af77: Apogee F77 compiler for Intergraph hardware running CLIX
dnl  epcf90: "Edinburgh Portable Compiler" F90
dnl  fort: Compaq (now HP) Fortran 90/95 compiler for Tru64 and Linux/Alpha
dnl  ifc: Intel Fortran 95 compiler for Linux/x86 (also known as ifort)
dnl  efc: Intel Fortran 95 compiler for IA64
dnl
case "$FC" in
  gfortran | g95 )
    dnl Get rid of unwanted DLLEXPORT declarations
    FCPPFLAGS="$FCPPFLAGS -DDLLEXPORT=\"!\""
  ;;
  *xlf*)
    FCFLAGS="$FCFLAGS -qsuffix=cpp=F90"
    FCPPFLAGS="$FCPPFLAGS -DDLLEXPORT=\"!\""
  ;;
  ifort | ifc )
    FCPPFLAGS="$FCPPFLAGS -DDLLEXPORT=\"!\""
  ;;	
  mpf90 | f90 | f95 | mpf95 | mpf77 ) 
    dnl sun compilers
    FCPPFLAGS="$FCPPFLAGS -DDLLEXPORT=\"!\""
  ;;	

esac

dnl kludge.. this affects preprocessor and fucks stuff up in some cases.
FCFLAGS="$FCFLAGS $FPICFLAG"
CFLAGS="$CFLAGS $CPICFLAG"
CXXFLAGS="$CXXFLAGS $CXXPICFLAG"

if $use_rpath; then
  if test -n "$enable_rpath_arg"; then
    RLD_FLAG="$enable_rpath_arg"
  fi
else
  RLD_FLAG=""
fi

### Dynamic linking is now enabled only if we are building shared
### libs and some API for dynamic linking is detected.

LD_CXX='$(CXX)'
LIBDLFCN=
DLFCN_INCFLAGS=
RDYNAMIC_FLAG=
DL_API_MSG=""
dlopen_api=false
shl_load_api=false
loadlibrary_api=false
dyld_api=false

### yes atleast now
SHARED_LIBS=true
if $SHARED_LIBS || $ENABLE_DYNAMIC_LINKING; then

  ### Check for dyld first since OS X can have a non-standard libdl	

  AC_CHECK_HEADER(Mach-O/dyld.h)  
  if test "$ac_cv_header_Mach_O_dyld_h" = yes; then
    dyld_api=true
  else 
    AC_CHECK_LIB(dld, shl_load)
    AC_CHECK_FUNCS(shl_load shl_findsym)
    if test "$ac_cv_func_shl_load" = yes \
      && test "$ac_cv_func_shl_findsym" = yes; then
      shl_load_api=true
    else
      AC_CHECK_LIB(wsock32, LoadLibrary)
      AC_CHECK_FUNCS(LoadLibrary)
      if test "$ac_cv_func_loadlibrary" = yes; then
        loadlibrary_api=true
      else
        AC_CHECK_LIB(dl, dlopen)
        AC_CHECK_FUNCS(dlopen dlsym dlerror dlclose)
        if test "$ac_cv_func_dlclose" = yes \
          && test "$ac_cv_func_dlerror" = yes \
          && test "$ac_cv_func_dlopen" = yes \
          && test "$ac_cv_func_dlsym" = yes; then
          dlopen_api=true
        else
	  case "$canonical_host_type" in
	    rs6000-ibm-aix* | powerpc-ibm-aix*)
	      LIBDLFCN="-ldlfcn -ll -lld"
	      DLFCN_INCFLAGS='-I$(top_srcdir)/dlfcn -I$(TOPDIR)/dlfcn'
	      dlopen_api=true
	    ;;
	    i[[3456]]86-*-sco3.2v5*)
	      LD_CXX='LD_RUN_PATH=$LD_RUN_PATH:$(octlibdir) $(CXX)'
	      dlopen_api=true
	    ;;
	  esac
	fi
      fi
    fi
  fi

  if $dlopen_api; then
    DL_API_MSG="(dlopen)"
    AC_DEFINE(HAVE_DLOPEN_API, 1, [Define if your system has dlopen, dlsym, dlerror, and dlclose for dynamic linking])
  elif $shl_load_api; then
    DL_API_MSG="(shl_load)"
    AC_DEFINE(HAVE_SHL_LOAD_API, 1, [Define if your system has shl_load and shl_findsym for dynamic linking])
  elif $loadlibrary_api; then
    DL_API_MSG="(LoadLibrary)"
    AC_DEFINE(HAVE_LOADLIBRARY_API, 1, [Define if your system has LoadLibrary for dynamic linking])
  elif $dyld_api; then
    DL_API_MSG="(dyld)"
    AC_DEFINE(HAVE_DYLD_API, 1, [Define if your system has dyld for dynamic linking])
  fi

  if $dlopen_api || $shl_load_api || $loadlibrary_api || $dyld_api; then
    ENABLE_DYNAMIC_LINKING=true
    AC_DEFINE(ENABLE_DYNAMIC_LINKING, 1, [Define if using dynamic linking])
  fi
  AC_DEFINE_UNQUOTED(SHL_EXTENSION, ".$SHLEXT",[Shared lib filename extension])
fi

LIBS="$ARPACK_LIBS $LAPACK_LIBS $BLAS_LIBS $UMFPACK_LIBS $HUTI_LIBS $MATC_LIBS $EIOF_LIBS $MATC_LIBS $LIBS $FCLIBS $FLIBS"

AC_MSG_RESULT([defining FPICFLAG to be $FPICFLAG])
AC_MSG_RESULT([defining CPICFLAG to be $CPICFLAG])
AC_MSG_RESULT([defining CXXPICFLAG to be $CXXPICFLAG])
AC_MSG_RESULT([defining SHLEXT to be $SHLEXT])
AC_MSG_RESULT([defining SHLLIB to be $SHLLIB])
AC_MSG_RESULT([defining SHLBIN to be $SHLBIN])
AC_MSG_RESULT([defining SHLEXT_VER to be $SHLEXT_VER])
AC_MSG_RESULT([defining SHLLIB_VER to be $SHLLIB_VER])
AC_MSG_RESULT([defining SHLBIN_VER to be $SHLBIN_VER])
AC_MSG_RESULT([defining SHLLINKEXT to be $SHLLINKEXT])
AC_MSG_RESULT([defining DLFCN_DIR to be $DLFCN_DIR])
AC_MSG_RESULT([defining SH_LD to be $SH_LD])
AC_MSG_RESULT([defining SH_LDFLAGS to be $SH_LDFLAGS])
AC_MSG_RESULT([defining SH_LDTOFLAGS to be $SH_LDTOFLAGS])
AC_MSG_RESULT([defining DL_LD to be $DL_LD])
AC_MSG_RESULT([defining DL_LDFLAGS to be $DL_LDFLAGS])
AC_MSG_RESULT([defining MKOCTFILE_DL_LDFLAGS to be $MKOCTFILE_DL_LDFLAGS])
AC_MSG_RESULT([defining SONAME_FLAGS to be $SONAME_FLAGS])
AC_MSG_RESULT([defining NO_OCT_FILE_STRIP to be $NO_OCT_FILE_STRIP])
AC_MSG_RESULT([defining RLD_FLAG to be $RLD_FLAG])
AC_MSG_RESULT([defining TEMPLATE_AR to be $TEMPLATE_AR])
AC_MSG_RESULT([defining TEMPLATE_ARFLAGS to be $TEMPLATE_ARFLAGS])
AC_MSG_RESULT([defining library_path_var to be $library_path_var])
AC_MSG_RESULT([defining FCPPFLAGS to be $FCPPFLAGS])
AC_MSG_RESULT([defining LIBSOLVER_DEPS to be $LIBSOLVER_DEPS])
AC_SUBST(FPICFLAG)
AC_SUBST(CPICFLAG)
AC_SUBST(CXXPICFLAG)
AC_SUBST(SHLEXT)
AC_SUBST(SHLLIB)
AC_SUBST(SHLBIN)
AC_SUBST(SHLEXT_VER)
AC_SUBST(SHLLIB_VER)
AC_SUBST(SHLBIN_VER)
AC_SUBST(SHLLINKEXT)
AC_SUBST(DLFCN_DIR)
AC_SUBST(SH_LD)
AC_SUBST(SH_LDFLAGS)
AC_SUBST(SH_LDTOFLAGS)
AC_SUBST(DL_LD)
AC_SUBST(DL_LDFLAGS)
AC_SUBST(MKOCTFILE_DL_LDFLAGS)
AC_SUBST(SONAME_FLAGS)
AC_SUBST(NO_OCT_FILE_STRIP)
AC_SUBST(RLD_FLAG)
AC_SUBST(TEMPLATE_AR)
AC_SUBST(TEMPLATE_ARFLAGS)
AC_SUBST(library_path_var)
AC_SUBST(FCPPFLAGS)
AC_SUBST(LIBEXT)
AC_SUBST(LIBSOLVER_DEPS)
AC_SUBST(RM)
AC_SUBST(CP)
AC_SUBST(MV)
AC_SUBST(F77)
AC_SUBST(CPP)
AC_SUBST(FC)
AC_SUBST(MKDIR)
AC_SUBST(LIBS)
AC_SUBST(FCFLAGS)

AC_CONFIG_HEADER(config.h)

AC_OUTPUT([
Makefile
src/Makefile
src/arpack/Makefile
src/view3d/Makefile
src/viewaxis/Makefile
]
)

AC_MSG_RESULT([
ELMER build options:
  Version                   $VERSION
  Install prefix            $prefix
  CPPFLAGS                  $CPPFLAGS
  FCPPFLAGS                 $FCPPFLAGS
  CFLAGS                    $CFLAGS
  FCFLAGS                    $FCFLAGS
  LDFLAGS                   $LDFLAGS
  LIBS                      $LIBS

Compilers:
  Fortran 90 compiler       $FC
  Fortran 77 compiler       $F77
  CC                        $CC
  C++                       $CXX
  CPP                       $CPP

Libs:  
  BLAS                      $BLAS_LIBS
  LAPACK                    $LAPACK_LIBS
  UMFPACK                   $UMFPACK_LIBS
  ARPACK		    $ARPACK_LIBS
  HUTI			    $HUTI_LIBS
  EIO			    $EIOF_LIBS

MPI:
  $HAVE_MPI
]);
